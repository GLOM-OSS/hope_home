datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

enum Gender {
    Male
    Female

    @@map("gender_enum")
}

enum Lang {
    en
    fr

    @@map("lang_enum")
}

enum Role {
    ADMIN
    CLIENT

    @@map("role_enum")
}

model Person {
    person_id         String   @id @default(uuid()) @db.VarChar(36)
    fullname          String   @db.VarChar(50)
    phone_number      String   @db.VarChar(15)
    whatsapp_number   String   @db.VarChar(15)
    profile_image_ref String?  @db.VarChar(45)
    gender            Gender?
    email             String   @unique @db.VarChar(50)
    preferred_lang    Lang     @default(fr)
    role              Role     @default(CLIENT)
    password          String?  @db.VarChar(75)
    created_at        DateTime @default(now()) @db.DateTime(0)

    Properties      Property[]
    FlagProperties  FlagProperty[]
    ResetPasswords  ResetPassword[]
    Comments        Comment[]       @relation(name: "comment_comment_by_key")
    DeletedComments Comment[]       @relation(name: "comment_deleted_by_key")
    LikedProperties LikedProperty[]
    PropertyAudits  PropertyAudit[]
    PersonAudits    PersonAudit[]
}

model PersonAudit {
    person_audit_id   String   @id @default(uuid()) @db.VarChar(36)
    fullname          String   @db.VarChar(50)
    phone_number      String   @db.VarChar(15)
    whatsapp_number   String   @db.VarChar(15)
    profile_image_ref String?  @db.VarChar(45)
    gender            Gender?
    email             String   @db.VarChar(50)
    preferred_lang    Lang
    role              Role
    password          String?  @db.VarChar(75)
    audited_at        DateTime @default(now()) @db.DateTime(0)
    person_id         String   @db.VarChar(36)
    Person            Person   @relation(fields: [person_id], references: [person_id], onDelete: Cascade, onUpdate: Cascade)
}

model ResetPassword {
    reset_password_id String    @id @default(uuid()) @db.VarChar(36)
    is_used           Boolean   @default(false) @db.TinyInt
    used_at           DateTime? @db.DateTime(0)
    expires_at        DateTime  @db.DateTime(0)
    created_at        DateTime  @default(now()) @db.DateTime(0)
    reset_by          String    @db.VarChar(36)
    Person            Person    @relation(fields: [reset_by], references: [person_id], onDelete: Cascade, onUpdate: Cascade)
}

enum HouseTypeEnum {
    Appartment
    Hostel
    Default
}

enum ListingReasonEnum {
    Rent
    Sale

    @@map("listing_reason_enum")
}

enum PropertyTypeEnum {
    Home
    Land

    @@map("property_type_enum")
}

model Property {
    property_id     String            @id @default(uuid()) @db.VarChar(36)
    image_ref       String?            @db.VarChar(45)
    price           Int
    area            Int
    listing_reason  ListingReasonEnum
    longitude       Int?
    latitude        Int?
    description     String
    property_type   PropertyTypeEnum
    is_listed       Boolean           @default(true) @db.TinyInt
    is_flagged      Boolean           @default(false) @db.TinyInt
    address         String
    number_of_rooms Int?
    number_of_baths Int?
    house_type      HouseTypeEnum?
    published_by    String            @db.VarChar(36)
    Publisher       Person            @relation(fields: [published_by], references: [person_id], onDelete: Cascade, onUpdate: Cascade)
    is_deleted      Boolean           @default(false) @db.TinyInt
    created_at      DateTime          @default(now()) @db.DateTime(0)

    FlagProperties  FlagProperty[]
    Comments        Comment[]
    PropertyImages  PropertyImage[]
    LikedProperties LikedProperty[]
    PropertyAudits  PropertyAudit[]
}

model PropertyAudit {
    property_audit_id String            @id @default(uuid()) @db.VarChar(36)
    image_ref         String            @db.VarChar(45)
    price             Int
    area              Int
    listing_reason    ListingReasonEnum
    longitude         Int
    latitude          Int
    description       String
    property_type     PropertyTypeEnum
    is_listed         Boolean           @default(true) @db.TinyInt
    is_flagged        Boolean           @default(false) @db.TinyInt
    address           String
    number_of_rooms   Int?
    number_of_baths   Int?
    house_type        HouseTypeEnum?
    is_deleted        Boolean           @default(false) @db.TinyInt
    audited_at        DateTime          @default(now()) @db.DateTime(0)
    audited_by        String            @db.VarChar(36)
    Person            Person            @relation(fields: [audited_by], references: [person_id], onDelete: Cascade, onUpdate: Cascade)
    property_id       String            @db.VarChar(36)
    Property          Property          @relation(fields: [property_id], references: [property_id], onDelete: Cascade, onUpdate: Cascade)
}

model PropertyImage {
    property_image_id String   @id @default(uuid()) @db.VarChar(36)
    image_ref         String   @db.VarChar(45)
    is_deleted        Boolean  @default(false) @db.TinyInt
    property_id       String   @db.VarChar(36)
    Property          Property @relation(fields: [property_id], references: [property_id], onDelete: Cascade, onUpdate: Cascade)
}

model FlagProperty {
    flag_property_id String   @id @default(uuid()) @db.VarChar(36)
    flag_at          DateTime @default(now()) @db.DateTime(0)
    property_id      String   @db.VarChar(36)
    Property         Property @relation(fields: [property_id], references: [property_id], onDelete: Cascade, onUpdate: Cascade)
    flag_by          String   @db.VarChar(36)
    Person           Person   @relation(fields: [flag_by], references: [person_id], onDelete: Cascade, onUpdate: Cascade)
    created_at       DateTime @default(now()) @db.DateTime(0)
}

model Comment {
    comment_id   String    @id @default(uuid()) @db.VarChar(36)
    comment      String
    is_deleted   Boolean   @default(false) @db.TinyInt
    deleted_at   DateTime? @db.DateTime(0)
    deleted_by   String?   @db.VarChar(36)
    DeletedBy    Person?   @relation(name: "comment_deleted_by_key", fields: [deleted_by], references: [person_id], onDelete: Cascade, onUpdate: Cascade)
    commented_at DateTime  @default(now()) @db.DateTime(0)
    commented_by String    @db.VarChar(36)
    Person       Person    @relation(name: "comment_comment_by_key", fields: [commented_by], references: [person_id], onDelete: Cascade, onUpdate: Cascade)
    property_id  String    @db.VarChar(36)
    Property     Property  @relation(fields: [property_id], references: [property_id], onDelete: Cascade, onUpdate: Cascade)
}

model LikedProperty {
    liked_property_id String    @id @default(uuid()) @db.VarChar(36)
    liked_at          DateTime  @default(now()) @db.DateTime(0)
    is_deleted        Boolean   @default(false) @db.TinyInt
    deleted_at        DateTime? @db.DateTime(0)
    liked_by          String    @db.VarChar(36)
    Person            Person    @relation(fields: [liked_by], references: [person_id], onDelete: Cascade, onUpdate: Cascade)
    property_id       String    @db.VarChar(36)
    Property          Property  @relation(fields: [property_id], references: [property_id], onDelete: Cascade, onUpdate: Cascade)

    @@unique([liked_by, property_id])
}
